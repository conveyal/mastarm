#!/usr/bin/env node

const commander = require('commander')
const path = require('path')

const loadConfig = require('../lib/load-config')
const util = require('../lib/util')

commander
  .version(require('../package.json').version)
  .option('-c, --config <path>', 'Path to configuration files.', path.join(process.cwd(), '/configurations/default'))
  .option('-e, --env <environment>', 'Environment to use.')
  .option('-m, --minify', 'Minify built files.')
  .option('-O, --outdir <dir>', 'Publish directory', '')
  .option('-S, --skip-check-dependencies', '**DEPRECATED**')

commander
  .command('build [entries...]')
  .description('Bundle JavaScript & CSS')
  .option('-F, --flyle', 'Cache and serve tiles.')
  .option('-p, --proxy <address>', 'Proxy calls through to target address.')
  .option('-s, --serve', 'Serve with budo. Auto-matically rebuilds on changes.')
  .option('-w, --watch', 'Automatically rebuild on changes.')
  .action(function (entries, options) {
    const config = loadConfig(process.cwd(), commander.config, commander.env)
    const get = util.makeGetFn([options, commander, config.settings])
    const files = util.parseEntries([...entries, ...(get('entries') || [])], get('outdir'))
    util.assertEntriesExist(files)
    const opts = {
      config,
      env: get('env'),
      files,
      flyle: get('flyle'),
      minify: get('minify'),
      proxy: get('proxy'),
      watch: get('watch')
    }
    if (get('serve')) {
      const budo = require('../lib/budo')
      budo(opts)
    } else {
      const build = require('../lib/build')
      build(opts)
    }
  })

commander
  .command('commit')
  .description('Force intelligent commit messages.')
  .action(function () {
    util.popMastarmFromArgv()
    const path = require('path')
    const bootstrap = require('commitizen/dist/cli/git-cz').bootstrap
    bootstrap({
      cliPath: path.join(__dirname, '../node_modules/commitizen'),
      config: {
        path: 'cz-conventional-changelog'
      }
    })
  })

commander
  .command('deploy [entries...]')
  .description('Bundle & Deploy JavaScript & CSS')
  .option('--cloudfront', 'CloudFront Distribution ID to invalidate.')
  .option('--s3bucket', 'S3 Bucket to push to.')
  .action(function (entries, options) {
    const pushToS3 = require('../lib/push-to-s3')
    const config = loadConfig(process.cwd(), commander.config, commander.env)
    const get = util.makeGetFn([options, commander, config.settings])
    const files = util.parseEntries([...entries, ...(get('entries') || [])])
    util.assertEntriesExist(files)
    Promise.all(files.map(pushToS3({
      cloudfront: get('cloudfront'),
      config,
      env: get('env'),
      minify: get('minify'),
      s3bucket: get('s3bucket')
    }))).then(() => {
      console.log('Finished pushing to s3')
      process.exit(0)
    }).catch((err) => {
      console.error(err.stack)
      process.exit(1)
    })
  })

commander
  .command('lint')
  .allowUnknownOption()
  .description('Lint JavaScript [& CSS coming soon!]')
  .action(function () {
    const engine = require('standard-engine')
    const standardOptions = require('standard/options')
    // get lint out of there
    process.argv = process.argv.filter((arg) => arg !== 'lint')
    // Force verbose
    process.argv.push('--verbose')
    // add babel-eslint parser
    standardOptions.parser = 'babel-eslint'
    engine.cli(standardOptions)
  })

commander
  .command('prepublish [entries...]')
  .description('Transpile JavaScript down to ES5 with Babel')
  .action(function (entries, options) {
    const prepublish = require('../lib/prepublish')
    const config = loadConfig(process.cwd(), commander.config, commander.env)
    const get = util.makeGetFn([options, commander, config.settings])

    prepublish({
      entries: util.parseEntries([...entries, ...(get('entries') || [])], get('outdir')),
      env: get('env'),
      outdir: get('outdir')
    })
  })

commander
  .command('test [patterns...]')
  .description('Run tests using Jest')
  .option('-u, --update-snapshots', 'Force update of snapshots. USE WITH CAUTION.')
  .option('--coverage', 'Run Jest with coverage reporting')
  .option('--no-cache', 'Run Jest without cache (defaults to using cache)')
  .option('--coverage-paths <paths>', 'Extra paths to collect code coverage from')
  .option('--setup-files <paths>', 'Setup files to run before each test')
  .option('--test-path-ignore-patterns <patterns>', 'File patterns to ignore when scanning for test files')
  .action(function (patterns, options) {
    const jest = require('jest')
    const config = loadConfig(process.cwd(), commander.config, commander.env)
    const get = util.makeGetFn([options, commander, config.settings])
    const testUtils = require('../lib/test')
    util.configureEnvironment({config, env: get('env')})
    jest.run(testUtils.generateTestConfig(patterns, options))
  })

commander.parse(process.argv)
